/******************************************************************************* * Copyright (c) 2005 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.jface.menus;import org.eclipse.core.commands.common.NamedHandleObject;import org.eclipse.jface.util.Util;/** * <p> * <strong>Experimental</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API with * consulting with the Platform/UI team. * </p> *  * @since 3.2 */public final class SActionSet extends NamedHandleObject {	private SReference[] references;	public boolean visible = false;	public SActionSet(final String id) {		super(id);	}	public final void define(final String name, final String description,			final boolean visible, final SReference[] references) {		this.name = name;		this.description = description;		this.visible = visible;		this.references = references;		this.defined = true;	}	public final boolean equals(final Object object) {		// Check if they're the same.		if (object == this) {			return true;		}		// Check if they're the same type.		if (!(object instanceof SActionSet))			return false;		// Check each property in turn.		final SActionSet actionSet = (SActionSet) object;		return Util.equals(id, actionSet.id);	}	public final SReference[] getReferences() {		final SReference[] result = new SReference[references.length];		System.arraycopy(references, 0, result, 0, references.length);		return result;	}	public final boolean isVisible() {		return visible;	}	public final String toString() {		if (string == null) {			final StringBuffer stringBuffer = new StringBuffer();			stringBuffer.append("SGroup("); //$NON-NLS-1$			stringBuffer.append(id);			stringBuffer.append(',');			stringBuffer.append(name);			stringBuffer.append(',');			stringBuffer.append(description);			stringBuffer.append(',');			stringBuffer.append(visible);			stringBuffer.append(',');			stringBuffer.append(references);			stringBuffer.append(',');			stringBuffer.append(defined);			stringBuffer.append(')');			string = stringBuffer.toString();		}		return string;	}	public final void undefine() {		string = null;		defined = false;		name = null;		description = null;		visible = false;		references = null;	}}