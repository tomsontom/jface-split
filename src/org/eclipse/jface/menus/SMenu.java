/******************************************************************************* * Copyright (c) 2005 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation *******************************************************************************/package org.eclipse.jface.menus;import org.eclipse.core.commands.common.NotDefinedException;import org.eclipse.jface.util.ListenerList;import org.eclipse.jface.util.Util;/** * <p> * A menu in a menu bar, a context menu or a pulldown menu attached to a tool * item. * </p> * <p> * Clients may instantiate this class, but must not extend. * </p> * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 */public final class SMenu extends MenuCollection {	private String label;	/**	 * Constructs a new instance of <code>SMenu</code>.	 * 	 * @param id	 *            The identifier of the menu to create; must not be	 *            <code>null</code>	 */	public SMenu(final String id) {		super(id);	}	/**	 * Adds a listener to this group that will be notified when this menu's	 * state changes.	 * 	 * @param listener	 *            The listener to be added; must not be <code>null</code>.	 */	public final void addListener(final IMenuListener listener) {		if (listenerList == null) {			listenerList = new ListenerList(1);		}		listenerList.add(listener);	}	/**	 * <p>	 * Defines this menu by indicating the label. The locations and dynamic menu	 * are optional. The defined property automatically becomes	 * <code>true</code>.	 * </p>	 * 	 * @param label	 *            The label for this menu; may be <code>null</code>.	 * @param locations	 *            The locations in which this group will appear; may be	 *            <code>null</code> or empty.	 * @param dynamic	 *            The class providing dynamic menu elements to this group; may	 *            be <code>null</code>.	 */	public final void define(final String label, SLocation[] locations,			final IDynamicMenu dynamic) {		if ((locations != null) && (locations.length == 0)) {			locations = null;		}		MenuEvent event = null;		if (isListenerAttached()) {			final boolean labelChanged = !Util.equals(this.label, label);			final boolean locationsChanged = !Util.equals(this.locations,					locations);			final boolean dynamicChanged = !Util.equals(this.dynamic, dynamic);			final boolean definedChanged = !this.defined;			event = new MenuEvent(this, labelChanged, locationsChanged,					dynamicChanged, definedChanged);		}		this.label = label;		this.locations = locations;		this.dynamic = dynamic;		this.defined = true;		fireMenuChanged(event);	}	/**	 * Notifies listeners to this menu that it has changed in some way.	 * 	 * @param event	 *            The event to fire; may be <code>null</code>.	 */	private final void fireMenuChanged(final MenuEvent event) {		if (event == null) {			return;		}		if (listenerList != null) {			final Object[] listeners = listenerList.getListeners();			for (int i = 0; i < listeners.length; i++) {				final IMenuListener listener = (IMenuListener) listeners[i];				listener.menuChanged(event);			}		}	}	/**	 * Returns the label for this menu. A menu does not need a label if its is	 * simply a pulldown menu on a tool item.	 * 	 * @return The label for this menu; may be <code>null</code>.	 * @throws NotDefinedException	 *             If the handle is not currently defined.	 */	public final String getLabel() throws NotDefinedException {		if (!isDefined()) {			throw new NotDefinedException(					"Cannot get the label from an undefined menu"); //$NON-NLS-1$		}		return label;	}	/**	 * Removes a listener from this menu.	 * 	 * @param listener	 *            The listener to be removed; must not be <code>null</code>.	 */	public final void removeListener(final IMenuListener listener) {		if (listenerList != null) {			listenerList.remove(listener);		}		if (listenerList.isEmpty()) {			listenerList = null;		}	}	/**	 * The string representation of this menu -- for debugging purposes only.	 * This string should not be shown to an end user.	 * 	 * @return The string representation; never <code>null</code>.	 */	public final String toString() {		if (string == null) {			final StringBuffer stringBuffer = new StringBuffer();			stringBuffer.append("SMenu("); //$NON-NLS-1$			stringBuffer.append(id);			stringBuffer.append(',');			stringBuffer.append(label);			stringBuffer.append(',');			try {				stringBuffer.append(dynamic);			} catch (final Exception e) {				// A bogus toString() in third-party code. Ignore.				stringBuffer.append(e.getClass().getName());			}			stringBuffer.append(',');			stringBuffer.append(defined);			stringBuffer.append(')');			string = stringBuffer.toString();		}		return string;	}	/**	 * Makes this menu become undefined. This has the side effect of changing	 * the label, locations and dynamic class to <code>null</code>.	 * Notification is sent to all listeners.	 */	public final void undefine() {		string = null;		MenuEvent event = null;		if (isListenerAttached()) {			final boolean separatorsChanged = label != null;			final boolean locationsChanged = locations != null;			final boolean dynamicChanged = dynamic != null;			final boolean definedChanged = this.defined;			event = new MenuEvent(this, separatorsChanged, locationsChanged,					dynamicChanged, definedChanged);		}		defined = false;		label = null;		locations = null;		dynamic = null;		fireMenuChanged(event);	}}