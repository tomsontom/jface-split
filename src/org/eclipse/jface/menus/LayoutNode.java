/******************************************************************************* * Copyright (c) 2006 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.jface.menus;import java.util.ArrayList;import java.util.Collection;import java.util.Collections;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.eclipse.core.commands.common.IIdentifiable;import org.eclipse.core.commands.common.NotDefinedException;import org.eclipse.jface.util.Util;/** * <p> * A node within a menu layout. A node has contains a menu element and some * child nodes. * </p> * <p> * This class is only intended to be used from within the * <code>org.eclipse.jface</code> plug-in. * </p> * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 */final class LayoutNode implements IIdentifiable, ILayoutNode, IMenuCollection {	/**	 * Returns the location to use from the menu element, if the menu element	 * was provided to the {@link #add(MenuElement)} method.	 * 	 * @param element	 *            The element from which the location should be retrieved; must	 *            not be <code>null</code>	 * @return The preferred location for this menu element; may be	 *         <code>null</code> if none.	 * @throws NotDefinedException	 *             If the provided menu element is <code>null</code>.	 */	private static final SLocation getLocation(final MenuElement element)			throws NotDefinedException {		final SLocation[] locations = element.getLocations();		if (locations.length > 0) {			return locations[0];		}		return null;	}	/**	 * The children of this node indexed by their identifiers. This map is	 * lazily initialized, and will be <code>null</code> until someone adds a	 * child node.	 */	private Map childrenById;	/**	 * The element this node represents. This value may be <code>null</code>	 * if this is a top-level node in some menu layout structure, or if the	 * element is implied.	 */	private MenuElement element;	/**	 * The specific location this node is referring to. This value may be	 * <code>null</code> if this is a top-level node in some menu layout	 * structure, or if the element is implied.	 */	private SLocation location;	/**	 * The identifiers of the children, but in the order indicating by their	 * ordering constraints. This list is lazily generated.	 */	private List orderedChildren;	/**	 * Constructs a new <code>SMenuLayout</code>.	 */	LayoutNode() {		// Do nothing	}	public final void add(final MenuElement element) throws NotDefinedException {		final String elementId = element.getId();		final LayoutNode node = getChildNode(elementId);		node.setElement(element);		node.setLocation(getLocation(element));		orderedChildren = null;	}	public final void clear() {		childrenById = null;		orderedChildren = null;	}	/**	 * Retrieves the child node with the given identifier. If no such node	 * exists yet, it is created.	 * 	 * @param id	 *            The identifier of the child node to retrieve; must not be	 *            <code>null</code>.	 * @return The child node; never <code>null</code>.	 */	final LayoutNode getChildNode(final String id) {		if (id == null) {			throw new NullPointerException(					"A child node cannot have a null identifier"); //$NON-NLS-1$		}		LayoutNode childNode = null;		if (childrenById == null) {			childrenById = new HashMap(4);		} else {			childNode = (LayoutNode) childrenById.get(id);		}		if (childNode == null) {			childNode = new LayoutNode();			childrenById.put(id, childNode);			orderedChildren = null;		}		return childNode;	}	public final List getChildrenSorted() {		final Collection unsortedChildren = getChildrenUnsorted();		final int numberOfChildren = unsortedChildren.size();		final ArrayList sortedChildren = new ArrayList(numberOfChildren);		/*		 * Step 1. Sort into four groups and one map. One group is the middle		 * block, which is all children with no ordering constraints. Two other		 * groups are the start and end blocks, which contain children that only		 * specify start or end constraints. The last group are those children		 * that specify one or more relative constraints. Finally, a map is		 * maintained for the first three groups (i.e., start, middle and end		 * blocks). This allows easy look-up of those nodes when the relatively		 * positioned nodes are eventually merged. Note: each block is sorted		 * alphabetically. This algorithm takes O(NlogN) time over the number of		 * children.		 */		final Map orderNodeById = new HashMap();		final OrderNode[][] blocks = new OrderNode[3][];		final int[] lengths = new int[3];		final int START = 0, MIDDLE = 1, END = 2;		blocks[START] = new OrderNode[numberOfChildren];		blocks[MIDDLE] = new OrderNode[numberOfChildren];		blocks[END] = new OrderNode[numberOfChildren];		final LayoutNode[] relativeOrderedChildren = new LayoutNode[numberOfChildren];		int relativePointer = 0;		final Iterator childItr = unsortedChildren.iterator();		while (childItr.hasNext()) {			final LayoutNode child = (LayoutNode) childItr.next();			final SLocation location = child.getLocation();			/*			 * Check to see if there are any ordering constraints. If there			 * aren't, then the item can be added to the fixed block.			 */			if (location == null) {				final OrderNode orderNode = new OrderNode(child);				orderNodeById.put(orderNode.getId(), orderNode);				sortedInsert(blocks[MIDDLE], lengths[MIDDLE]++, orderNode);				continue;			}			final SOrder[] orderingConstraints = location.getOrderings();			if ((orderingConstraints == null)					|| (orderingConstraints.length == 0)) {				final OrderNode orderNode = new OrderNode(child);				orderNodeById.put(orderNode.getId(), orderNode);				sortedInsert(blocks[MIDDLE], lengths[MIDDLE]++, orderNode);				continue;			}			/*			 * Check to see if there is a relative ordering constraint. If there			 * is, add it to the relative block.			 */			int fixedPosition = SOrder.NO_POSITION;			boolean inserted = false;			for (int i = 0; i < orderingConstraints.length; i++) {				final SOrder orderingConstraint = orderingConstraints[i];				final int position = orderingConstraint.getPosition();				if ((SOrder.POSITION_AFTER == position)						|| (SOrder.POSITION_BEFORE == position)) {					sortedInsert(relativeOrderedChildren, relativePointer++,							child);					inserted = true;					break;				}				if ((SOrder.POSITION_START == position)						|| (SOrder.POSITION_END == position)) {					fixedPosition = position;				}			}			if (!inserted) {				OrderNode orderNode = null;				switch (fixedPosition) {				case SOrder.POSITION_START:					orderNode = new OrderNode(child);					orderNodeById.put(orderNode.getId(), orderNode);					sortedInsert(blocks[START], lengths[START]++, orderNode);					break;				case SOrder.POSITION_END:					orderNode = new OrderNode(child);					orderNodeById.put(orderNode.getId(), orderNode);					sortedInsert(blocks[END], lengths[END]++, orderNode);					break;				case SOrder.NO_POSITION:				default:					orderNode = new OrderNode(child);					orderNodeById.put(orderNode.getId(), orderNode);					sortedInsert(blocks[MIDDLE], lengths[MIDDLE]++, orderNode);				}			}		}		/*		 * TODO Step 2. Now we have four alphabetically sorted blocks: start,		 * middle, end and relative. We now need to merge the relatively ordered		 * block into the other three blocks. This can be done by using the		 * order node map we built up in step 1.		 */		/*		 * Step 3. Copy the order nodes from the start, middle and end blocks		 * into the final result.		 */		for (int i = 0; i < blocks.length; i++) {			for (int j = 0; j < lengths[i]; j++) {				final OrderNode node = blocks[i][j];				sortedChildren.addAll(node.getBeforeNodes());				sortedChildren.add(node.getLayoutNode());				sortedChildren.addAll(node.getAfterNodes());			}		}		return sortedChildren;	}	/**	 * Returns the children of this node, if any. This collection is unsorted.	 * 	 * @return The children ({@link LayoutNode}); never <code>null</code>,	 *         but may be empty.	 */	final Collection getChildrenUnsorted() {		if (childrenById == null) {			return Collections.EMPTY_LIST;		}		return childrenById.values();	}	public final String getId() {		if (element != null) {			return element.getId();		}		return null;	}	public final SLocation getLocation() {		return location;	}	public final MenuElement getMenuElement() {		return element;	}	public final boolean remove(final MenuElement element) {		if (orderedChildren != null) {			orderedChildren.remove(element);		}		if (childrenById != null) {			final String id = element.getId();			final Object removedObject = childrenById.remove(id);			return (removedObject != null);		}		return false;	}	/**	 * Sets the menu element for this node.	 * 	 * @param element	 *            The element to set; must not be <code>null</code>.	 */	final void setElement(final MenuElement element) {		if (element == null) {			throw new NullPointerException(					"A node cannot be given a null element"); //$NON-NLS-1$		}		this.element = element;	}	/**	 * Sets the location for this node.	 * 	 * @param location	 *            The location to set; must not be <code>null</code>.	 */	final void setLocation(final SLocation location) {		if (location == null) {			throw new NullPointerException(					"A node cannot be given a null location"); //$NON-NLS-1$		}		this.location = location;	}	/**	 * Inserts a node into an array, sorted based on the identifier of the	 * element. If there is no element, then the item appears first.	 * 	 * @param array	 *            The array into which the element should be inserted; must not	 *            be <code>null</code>.	 * @param length	 *            The current number of elements inserted into the array; must	 *            be an index in bounds.	 * @param node	 *            The node to inserted; must not be <code>null</code>.	 */	private final void sortedInsert(final IIdentifiable[] array,			final int length, final IIdentifiable node) {		if (length < 5) {			// Linear insert.			sortedInsertLinear(array, length, node);		} else {			// Binary insert.			sortedInsertBinary(array, length, node);		}	}	/**	 * Inserts a node into an array using a binary search, sorted based on the	 * identifier of the element. If there is no element, then the item appears	 * first.	 * 	 * @param array	 *            The array into which the element should be inserted; must not	 *            be <code>null</code>.	 * @param length	 *            The current number of elements inserted into the array; must	 *            be an index in bounds.	 * @param node	 *            The node to inserted; must not be <code>null</code>.	 */	private final void sortedInsertBinary(final IIdentifiable[] array,			final int length, final IIdentifiable node) {		// TODO Something	}	/**	 * Inserts a node into an array using a linear search, sorted based on the	 * identifier of the element. If there is no element, then the item appears	 * first.	 * 	 * @param array	 *            The array into which the element should be inserted; must not	 *            be <code>null</code>.	 * @param length	 *            The current number of elements inserted into the array; must	 *            be an index in bounds.	 * @param node	 *            The node to inserted; must not be <code>null</code>.	 */	private final void sortedInsertLinear(final IIdentifiable[] array,			final int length, final IIdentifiable node) {		final String nodeId = node.getId();		IIdentifiable movingNode = null;		for (int i = 0; i < length + 1; i++) {			final IIdentifiable current = array[i];			if (current == null) {				if (movingNode == null) {					array[i] = node;				} else {					array[i] = movingNode;				}			} else {				if (movingNode == null) {					final String currentId = current.getId();					final int comparison = Util.compare(nodeId, currentId);					if (comparison < 0) {						array[i] = node;						movingNode = current;					}				} else {					array[i] = movingNode;					movingNode = current;				}			}		}	}	public final String toString() {		final StringBuffer buffer = new StringBuffer("LayoutNode("); //$NON-NLS-1$		buffer.append(element);		buffer.append(',');		buffer.append(location);		buffer.append(')');		return buffer.toString();	}}