/******************************************************************************* * Copyright (c) 2006 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.jface.menus;import java.util.ArrayList;import java.util.Collection;import java.util.Collections;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.eclipse.core.commands.common.NotDefinedException;/** * A node within a menu layout. A node has contains a menu element and some * child nodes. * <p> * This class is only intended to be used from within the * <code>org.eclipse.jface</code> plug-in. * </p> * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 */final class LayoutNode implements ILayoutNode, IMenuCollection {	/**	 * Returns the location to use from the menu element, if the menu element	 * was provided to the {@link #add(MenuElement)} method.	 * 	 * @param element	 *            The element from which the location should be retrieved; must	 *            not be <code>null</code>	 * @return The preferred location for this menu element; may be	 *         <code>null</code> if none.	 * @throws NotDefinedException	 *             If the provided menu element is <code>null</code>.	 */	private static final SLocation getLocation(final MenuElement element)			throws NotDefinedException {		final SLocation[] locations = element.getLocations();		if (locations.length > 0) {			return locations[0];		}		return null;	}	/**	 * The children of this node indexed by their identifiers. This map is	 * lazily initialized, and will be <code>null</code> until someone adds a	 * child node.	 */	private Map childrenById;	/**	 * The element this node represents. This value may be <code>null</code>	 * if this is a top-level node in some menu layout structure, or if the	 * element is implied.	 */	private MenuElement element;	/**	 * The specific location this node is referring to. This value may be	 * <code>null</code> if this is a top-level node in some menu layout	 * structure, or if the element is implied.	 */	private SLocation location;	/**	 * The identifiers of the children, but in the order indicating by their	 * ordering constraints. This list is lazily generated.	 */	private List orderedChildren;	/**	 * Constructs a new <code>SMenuLayout</code>.	 */	LayoutNode() {		// Do nothing	}	public final void add(final MenuElement element) throws NotDefinedException {		final String elementId = element.getId();		final LayoutNode node = getChildNode(elementId);		node.setElement(element);		node.setLocation(getLocation(element));		orderedChildren = null;	}	public final void clear() {		childrenById = null;		orderedChildren = null;	}	/**	 * Retrieves the child node with the given identifier. If no such node	 * exists yet, it is created.	 * 	 * @param id	 *            The identifier of the child node to retrieve; must not be	 *            <code>null</code>.	 * @return The child node; never <code>null</code>.	 */	final LayoutNode getChildNode(final String id) {		if (id == null) {			throw new NullPointerException(					"A child node cannot have a null identifier"); //$NON-NLS-1$		}		LayoutNode childNode = null;		if (childrenById == null) {			childrenById = new HashMap(4);		} else {			childNode = (LayoutNode) childrenById.get(id);		}		if (childNode == null) {			childNode = new LayoutNode();			childrenById.put(id, childNode);			orderedChildren = null;		}		return childNode;	}	/**	 * <p>	 * There is an array list allocated for the sort, and two insertion pointers	 * are maintained. One is the start insertion pointer, and the other is the	 * middle insertion pointer. The end insertion pointer is implicitly the	 * current size of the list.	 * </p>	 * 	 * @return The children ({@link LayoutNode}); never <code>null</code>,	 *         but may be empty.	 * @see ILayoutNode#getChildrenSorted()	 */	public final List getChildrenSorted() {		final ArrayList sortedChildren = new ArrayList(childrenById.size());		final Collection unsortedChildren = getChildrenUnsorted();		final Iterator childItr = unsortedChildren.iterator();		int middleInsertionIndex = 0;		int startInsertionIndex = 0;		while (childItr.hasNext()) {			final LayoutNode child = (LayoutNode) childItr.next();			final SLocation location = child.getLocation();			/*			 * Check to see if there are any ordering constraints. If there			 * aren't, then the item can be safely appended to the middle block.			 */			if (location == null) {				sortedChildren.add(middleInsertionIndex, child);				middleInsertionIndex++;				continue;			}			final SOrder[] orderingConstraints = location.getOrderings();			if ((orderingConstraints == null)					|| (orderingConstraints.length == 0)) {				sortedChildren.add(middleInsertionIndex, child);				middleInsertionIndex++;				continue;			}			/* Check to see if there is a start or end constraint. */			for (int i = 0; i < orderingConstraints.length; i++) {				final SOrder orderingConstraint = orderingConstraints[i];				final int position = orderingConstraint.getPosition();				if (SOrder.POSITION_START == position) {					sortedChildren.add(startInsertionIndex, child);					startInsertionIndex++;					middleInsertionIndex++;				} else if (SOrder.POSITION_END == position) {					sortedChildren.add(child);				}			}			// TODO Relative positioning.		}		return sortedChildren;	}	/**	 * Returns the children of this node, if any. This collection is unsorted.	 * 	 * @return The children ({@link LayoutNode}); never <code>null</code>,	 *         but may be empty.	 */	final Collection getChildrenUnsorted() {		if (childrenById == null) {			return Collections.EMPTY_LIST;		}		return childrenById.values();	}	public final SLocation getLocation() {		return location;	}	public final MenuElement getMenuElement() {		return element;	}	public final boolean remove(final MenuElement element) {		if (orderedChildren != null) {			orderedChildren.remove(element);		}		if (childrenById != null) {			final String id = element.getId();			final Object removedObject = childrenById.remove(id);			return (removedObject != null);		}		return false;	}	/**	 * Sets the menu element for this node.	 * 	 * @param element	 *            The element to set; must not be <code>null</code>.	 */	final void setElement(final MenuElement element) {		if (element == null) {			throw new NullPointerException(					"A node cannot be given a null element"); //$NON-NLS-1$		}		this.element = element;	}	/**	 * Sets the location for this node.	 * 	 * @param location	 *            The location to set; must not be <code>null</code>.	 */	final void setLocation(final SLocation location) {		if (location == null) {			throw new NullPointerException(					"A node cannot be given a null location"); //$NON-NLS-1$		}		this.location = location;	}		public final String toString() {		final StringBuffer buffer = new StringBuffer("LayoutNode("); //$NON-NLS-1$		buffer.append(element);		buffer.append(',');		buffer.append(location);		buffer.append(')');		return buffer.toString();	}}