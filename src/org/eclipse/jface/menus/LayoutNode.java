/******************************************************************************* * Copyright (c) 2006 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.jface.menus;import java.util.Collection;import java.util.HashMap;import java.util.Map;/** * A node within a menu layout. A node has contains a menu element and some * child nodes. * <p> * This class is only intended to be used from within the * <code>org.eclipse.jface</code> plug-in. * </p> * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 *  */final class LayoutNode {	/**	 * The children of this node indexed by their identifiers. This map is never	 * <code>null</code>	 */	private final Map childrenById;	/**	 * The element this node represents. This value may be <code>null</code>	 * if this is a top-level node in some menu layout structure, or if the	 * element is implied.	 */	private MenuElement element;	/**	 * The identifier for this layout node. This is used for implied elements to	 * provide something meaningful.	 */	private final String id;	/**	 * The identifiers of the children, but in the order indicating by their	 * ordering constraints. This list is lazily generated. TODO This isn't	 * needed yet.	 */	// private List orderedChildIds;	/**	 * Constructs a new <code>SMenuLayout</code>.	 * 	 * @param id	 *            The identifier for this layout node; may be <code>null</code>.	 */	LayoutNode(final String id) {		this.id = id;		childrenById = new HashMap(11);	}	/**	 * Retrieves the child node with the given identifier. If no such node	 * exists yet, it is created.	 * 	 * @param id	 *            The identifier of the child node to retrieve; must not be	 *            <code>null</code>.	 * @return The child node; never <code>null</code>.	 */	final LayoutNode getChildNode(final String id) {		if (id == null) {			throw new NullPointerException(					"A child node cannot have a null identifier"); //$NON-NLS-1$		}		LayoutNode childNode = (LayoutNode) childrenById.get(id);		if (childNode == null) {			childNode = new LayoutNode(id);			childrenById.put(id, childNode);		}		return childNode;	}	/**	 * Returns the children of this node, if any.	 * 	 * @return The children; never <code>null</code>, but may be empty.	 */	final Collection getChildren() {		return childrenById.values();	}	/**	 * Returns the menu element for this node.	 * 	 * @return The menu element; may be <code>null</code>.	 */	final MenuElement getMenuElement() {		return element;	}	/**	 * Returns the identifier for this node.	 * 	 * @return The node identifier; may be <code>null</code>.	 */	final String getId() {		if (element != null) {			return element.getId();		}		return id;	}	/**	 * Sets the menu element for this node.	 * 	 * @param element	 *            The element to set; must not be <code>null</code>.	 */	final void setElement(final MenuElement element) {		if (element == null) {			throw new NullPointerException(					"A node cannot be given a null element"); //$NON-NLS-1$		}		this.element = element;	}}