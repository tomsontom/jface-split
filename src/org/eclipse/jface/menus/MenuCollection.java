/******************************************************************************* * Copyright (c) 2005 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.jface.menus;import org.eclipse.core.commands.common.NotDefinedException;/** * <p> * A menu collection is a menu element that can contain other elements. * </p> * <p> * Clients must not implement or extend. * </p> * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 * @see org.eclipse.jface.menus.SMenu * @see org.eclipse.jface.menus.SGroup */public abstract class MenuCollection extends MenuElement implements		IMenuCollection {	/**	 * The class providing dynamic menu elements to this menu collection. If	 * this value is <code>null</code>, then there are no dynamic elements.	 */	protected IDynamicMenu dynamic;	/**	 * The elements contained within this collection. This value is	 * <code>null</code> if there are none.	 */	private MenuElement[] elements = null;	/**	 * Constructs a new instance of <code>MenuCollection</code>.	 * 	 * @param id	 *            The identifier of the collection to create; must not be	 *            <code>null</code>.	 */	protected MenuCollection(final String id) {		super(id);	}	public void add(final int index, final MenuElement element) {		if (element == null) {			throw new NullPointerException("The element cannot be null"); //$NON-NLS-1$		}		if (elements == null) {			if (index != 0) {				throw new ArrayIndexOutOfBoundsException(						"The array is only one item, and the index given was " //$NON-NLS-1$								+ index);			}			elements = new MenuElement[1];			elements[0] = element;		} else {			if (index > elements.length) {				throw new ArrayIndexOutOfBoundsException("The array is " //$NON-NLS-1$						+ elements.length						+ " elements long, but the index given is " + index); //$NON-NLS-1$			}			final MenuElement[] temp = new MenuElement[elements.length + 1];			System.arraycopy(elements, 0, temp, 0, index);			temp[index] = element;			System.arraycopy(elements, index, temp, 0, elements.length - index);		}	}	public final void add(final MenuElement element) {		if (element == null) {			throw new NullPointerException("The element cannot be null"); //$NON-NLS-1$		}		if (elements == null) {			elements = new MenuElement[1];		}		elements[0] = element;	}	public final void clear() {		elements = null;	}	public final MenuElement get(final int index) {		return elements[index];	}	/**	 * Returns the class generating dynamic menu elements for this menu	 * collection.	 * 	 * @return The class generating dynamic menu elements for this menu	 *         collection; never <code>null</code>.	 * @throws NotDefinedException	 *             If the handle is not currently defined.	 */	public final IDynamicMenu getDynamic() throws NotDefinedException {		if (!isDefined()) {			throw new NotDefinedException(					"Cannot get the dynamic class from an undefined menu collection"); //$NON-NLS-1$		}		return dynamic;	}	public final MenuElement remove(final int index) {		if (index < elements.length) {			final MenuElement[] temp = new MenuElement[elements.length - 1];			System.arraycopy(elements, 0, temp, 0, index);			System.arraycopy(elements, index + 1, temp, index, temp.length					- index);			final MenuElement returnValue = elements[index];			elements = temp;			return returnValue;		}		return null;	}	public final boolean remove(final MenuElement element) {		if (elements == null) {			return false;		}		int index;		for (index = 0; index < elements.length; index++) {			if (elements[index].equals(element)) {				break;			}		}		if (index < elements.length) {			final MenuElement[] temp = new MenuElement[elements.length - 1];			System.arraycopy(elements, 0, temp, 0, index);			System.arraycopy(elements, index + 1, temp, index, temp.length					- index);			elements = temp;			return true;		}		return false;	}	public final int size() {		return elements.length;	}}