/******************************************************************************* * Copyright (c) 2005 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.jface.menus;import org.eclipse.core.commands.common.HandleObject;import org.eclipse.core.commands.common.NotDefinedException;import org.eclipse.jface.util.ListenerList;/** * <p> * A handle object existing in the menus. This can be either a menu, a group, an * item or a widget. * </p> * <p> * Clients must not implement or extend. * </p> * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 * @see org.eclipse.jface.menus.SMenu * @see org.eclipse.jface.menus.SGroup * @see org.eclipse.jface.menus.SItem * @see org.eclipse.jface.menus.SWidget */public abstract class MenuElement extends HandleObject {	/**	 * A collection of objects listening to changes to this group. This	 * collection is <code>null</code> if there are no listeners.	 */	protected transient ListenerList listenerList = null;	/**	 * The locations in which this menu element appears. This value may be empty	 * or <code>null</code>.	 */	protected SLocation[] locations;	/**	 * Constructs a new instance of <code>MenuElement</code>.	 * 	 * @param id	 *            The identifier of the element to create; must not be	 *            <code>null</code>.	 */	public MenuElement(final String id) {		super(id);	}	/**	 * Returns the locations for this menu collection. This performs a copy of	 * the internal data structure.	 * 	 * @return The locations for this menu collection; never <code>null</code>.	 * @throws NotDefinedException	 *             If the handle is not currently defined.	 */	public final SLocation[] getLocations() throws NotDefinedException {		if (!isDefined()) {			throw new NotDefinedException(					"Cannot get the locations from an undefined menu element"); //$NON-NLS-1$		}		final SLocation[] result = new SLocation[locations.length];		System.arraycopy(locations, 0, result, 0, locations.length);		return result;	}	/**	 * Whether one or more listeners are attached to the action set.	 * 	 * @return <code>true</code> if listeners are attached to the action set;	 *         <code>false</code> otherwise.	 */	protected final boolean isListenerAttached() {		return listenerList != null;	}}