/******************************************************************************* * Copyright (c) 2005 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.jface.menus;/** * <p> * A reference within an <code>SLocation</code> to a specific location within * the menu bar, tool bar or status line. * </p> * <p> * Clients may instantiate this class, but must not extend. * </p> * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 */public final class SBar {	/**	 * The constant used for a menu bar.	 */	public static final int TYPE_MENU = 0;	/**	 * The constant used for the tool bar.	 */	public static final int TYPE_TOOL = 1;	/**	 * The constant used for the status line.	 */	public static final int TYPE_STATUS = 2;	/**	 * The type of bar this is making reference to.	 */	private final int type;	/**	 * The path within that bar to the final location. The path is a	 * slash-delimited list of menu elements.	 */	private final String path;	/**	 * Constructs a new instance of <code>SBar</code>.	 * 	 * @param type	 *            The type of bar this is making reference to. This must be one	 *            of <code>TYPE_MENU</code>, <code>TYPE_TOOL</code> or	 *            <code>TYPE_STATUS</code>.	 * @param path	 *            The path to the final location. If this value is	 *            <code>null</code>, it means that it should be inserted at	 *            the top-level of the bar.	 */	public SBar(final int type, final String path) {		if (type < TYPE_MENU || type > TYPE_STATUS) {			throw new IllegalArgumentException(					"A bar can only be a menu bar, tool bar or status line"); //$NON-NLS-1$		}		this.type = type;		this.path = path;	}	/**	 * Returns the type for this bar.	 * 	 * @return The type for this bar.	 */	public final int getReferences() {		return type;	}	/**	 * Returns the full path for this location. The path is a slash-delimited	 * list of menu elements.	 * 	 * @return The full path. If this value is <code>null</code>, it means	 *         that it should be inserted at the top-level of the bar.	 */	public final String getPath() {		return path;	}}