/******************************************************************************* * Copyright (c) 2005 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.jface.menus;import org.eclipse.core.commands.IParameter;import org.eclipse.core.expressions.Expression;import org.eclipse.jface.util.Util;/** * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 */public final class SItem extends MenuElement {	private String commandId;	private String menuId;	private SLocation[] locations;	private IParameter[] parameters;	private Expression visibleWhen;	public SItem(final String id) {		super(id);	}	public final void define(final String commandId, final String menuId,			final SLocation[] locations, final Expression visibleWhen,			final IParameter[] parameters) {		this.commandId = commandId;		this.menuId = menuId;		this.locations = locations;		this.visibleWhen = visibleWhen;		this.parameters = parameters;		this.defined = true;	}	public final boolean equals(final Object object) {		// Check if they're the same.		if (object == this) {			return true;		}		// Check if they're the same type.		if (!(object instanceof SItem))			return false;		// Check each property in turn.		final SItem item = (SItem) object;		return Util.equals(id, item.id);	}	public final String getCommandId() {		return commandId;	}	public final String getMenuId() {		return menuId;	}	public final SLocation[] getLocations() {		final SLocation[] result = new SLocation[locations.length];		System.arraycopy(locations, 0, result, 0, locations.length);		return result;	}	public final IParameter[] getParameters() {		final IParameter[] result = new IParameter[parameters.length];		System.arraycopy(parameters, 0, result, 0, parameters.length);		return result;	}	public final Expression getVisibleWhen() {		return visibleWhen;	}	public final String toString() {		if (string == null) {			final StringBuffer stringBuffer = new StringBuffer();			stringBuffer.append("SItem("); //$NON-NLS-1$			stringBuffer.append(id);			stringBuffer.append(',');			stringBuffer.append(commandId);			stringBuffer.append(',');			stringBuffer.append(menuId);			stringBuffer.append(',');			stringBuffer.append(locations);			stringBuffer.append(',');			stringBuffer.append(visibleWhen);			stringBuffer.append(',');			stringBuffer.append(parameters);			stringBuffer.append(',');			stringBuffer.append(defined);			stringBuffer.append(')');			string = stringBuffer.toString();		}		return string;	}	public final void undefine() {		string = null;		defined = false;		commandId = null;		menuId = null;		locations = null;		visibleWhen = null;		parameters = null;	}}