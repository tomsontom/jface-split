/******************************************************************************* * Copyright (c) 2006 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.jface.menus;import java.util.List;/** * <p> * A node within the menu layout. This holds information about the location, the * corresponding menu element as well as some children. This layout is * immutable. * </p> * <p> * Clients must not extend or implement. * </p> * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 */public interface ILayoutNode {	/**	 * <p>	 * Returns the children of this node, if any. This collection is sorted into	 * the ordering, as specified in the ordering constraints. The sort order is	 * broken into three blocks: beginning, middle and end. Within those blocks,	 * items appear as they given by the call to {@link #getChildrenUnsorted()}	 * ... unless a before or after constraint is given. If a before or after	 * constraint is given, then the item appears in a position relative to	 * other item. Note that the before and after constraints have lower	 * priority than the start and end constraints. As such, if something from	 * the middle is after an item that appears in the end block, then the item	 * will simply appear in the middle block (i.e., the relative positioning is	 * ignored).	 * </p>	 * 	 * @return The children ({@link LayoutNode}); never <code>null</code>,	 *         but may be empty.	 */	List getChildrenSorted();	/**	 * Returns the specific location for this node. Normally, a menu element can	 * be associated with one or more locations. This location is one of the	 * menu element's location, and represented this particular position within	 * the menu layout.	 * 	 * @return The location represented by this layout node; may be	 *         <code>null</code> if this is a top-level layout node or if the	 *         node is implicitly created.	 */	SLocation getLocation();	/**	 * Returns the menu element for this node.	 * 	 * @return The menu element; may be <code>null</code>.	 */	MenuElement getMenuElement();}